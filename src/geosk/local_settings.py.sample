# -*- coding: utf-8 -*-

DEBUG = TEMPLATE_DEBUG = False
DEBUG_STATIC = False

SITENAME = 'XXXXXXXXXXXXX'

# updated by sk-updateip
SITEURL = "http://localhost/"
ALLOWED_HOSTS=["localhost"]


# SOS 52 North Server Settings
SOS_URL = SITEURL + 'observations/sos'

SOS_SERVER = {
  'default' : {
    'LOCATION' : 'http://localhost:8080/observations/sos',
    'PUBLIC_LOCATION' : SOS_URL,
    'KVP_LOCATION': SOS_URL + '/kvp',
    'POX_LOCATION': SOS_URL + '/pox',
    'VERSION': '2.0.0',
    'TRANSACTIONAL_AUTHORIZATION_TOKEN': 'XXXXXXXXXXXXX',
    'USER' : None,
    'PASSWORD' : None,
    }
  }


# OGC (WMS/WFS/WCS) Server Settings
GEOSERVER_URL = SITEURL + 'geoserver/'

OGC_SERVER = {
  'default' : {
    'BACKEND' : 'geonode.geoserver',
    'LOCATION' : 'http://localhost:8080/geoserver/',
    'PUBLIC_LOCATION' : GEOSERVER_URL,
    'USER' : 'admin',
    'PASSWORD' : 'XXXXXXXXXXXXX',
    'MAPFISH_PRINT_ENABLED' : True,
    'PRINTNG_ENABLED' : True,
    'GEONODE_SECURITY_ENABLED' : True,
    'GEOGIT_ENABLED' : False,
    'WMST_ENABLED' : False,
    'BACKEND_WRITE_ENABLED': True,
    'WPS_ENABLED' : True,
    # Set to name of database in DATABASES dictionary to enable
    'DATASTORE': 'datastore',
    }
  }


# PyCSW Server Settings
CATALOGUE = {
  'default': {
    # The underlying CSW backend
    # ("pycsw_http", "pycsw_local", "geonetwork", "deegree")
    'ENGINE': 'geonode.catalogue.backends.pycsw_local',
    # The FULLY QUALIFIED base url to the CSW instance for this GeoNode
    'URL': '%scatalogue/csw' % SITEURL,
    }
  }


# Default base layers
MAP_BASELAYERS = [{
    "source": {
        "ptype": "gxp_wmscsource",
        "url": GEOSERVER_URL + "wms",
        "restUrl": "/gs/rest"
     }
  }, {
    "source": {"ptype": "gxp_olsource"},
    "type":"OpenLayers.Layer",
    "args":["No background"],
    "visibility": False,
    "fixed": True,
    "group":"background"
  }, {
    "source": {
        "ptype": "gxp_wmscsource",
        "url":"http://geo.vliz.be/geoserver/MarineRegions/wms?Request=getCapabilities",
        "title": "Flanders Marine Institute (VLIZ)"
     }
  }, {
    "source": {"ptype":"gxp_googlesource"},
    "group":"background",
    "name":"SATELLITE",
    "visibility": False,
    "fixed": True,
  }, {
    "source": {"ptype":"gxp_googlesource"},
    "group":"background",
    "name":"HYBRID",
    "visibility": False,
    "fixed": True,
  }, {
    "source": {"ptype":"gxp_googlesource"},
    "group":"background",
    "name":"TERRAIN",
    "visibility": False,
    "fixed": True,
  }, {
    "source": {"ptype":"gxp_googlesource"},
    "group":"background",
    "name":"ROADMAP",
    "visibility": False,
    "fixed": True
  }, {
    "source": {"ptype": "gxp_olsource"},
    "type":"OpenLayers.Layer.OSM",
    "args":["OpenStreetMap"],
    "visibility": False,
    "fixed": True,
    "group":"background"
  }, {
    "source": {"ptype": "gxp_mapboxsource"},
  },
]


# TODO:
try:
    from pycsw_settings import *
except (ImportError, NameError):
    pass


# Uncomment the following to receive emails whenever there are errors in GeoNode
#ADMINS = (
#            ('John', 'john@example.com'), 
#         )

# Uncomment the following to use a Gmail account as the email backend
#EMAIL_USE_TLS = True
#EMAIL_HOST = 'smtp.gmail.com'
#EMAIL_HOST_USER = 'youremail@gmail.com'
#EMAIL_HOST_PASSWORD = 'yourpassword'
#EMAIL_PORT = 587

# For more information on available settings please consult the Django docs at
# https://docs.djangoproject.com/en/dev/ref/settings
